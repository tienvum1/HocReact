import React, { useState } from 'react';
import './GitCommands.css';

/**
 * Component hi·ªÉn th·ªã c√°c b∆∞·ªõc th·ª±c hi·ªán Git commands
 * V·ªõi animation v√† interactive UI
 */
const GitCommands = () => {
  // State ƒë·ªÉ track b∆∞·ªõc hi·ªán t·∫°i
  const [currentStep, setCurrentStep] = useState(0);
  const [completedSteps, setCompletedSteps] = useState([]);

  // Danh s√°ch c√°c b∆∞·ªõc Git
  const gitSteps = [
    {
      id: 1,
      title: "Kh·ªüi t·∫°o Git Repository",
      command: "git init",
      description: "T·∫°o m·ªôt repository Git m·ªõi trong th∆∞ m·ª•c hi·ªán t·∫°i",
      icon: "üéØ",
      example: "cd my-project && git init"
    },
    {
      id: 2,
      title: "Ki·ªÉm tra tr·∫°ng th√°i",
      command: "git status",
      description: "Xem tr·∫°ng th√°i c√°c file trong working directory",
      icon: "üëÄ",
      example: "git status"
    },
    {
      id: 3,
      title: "Th√™m file v√†o staging",
      command: "git add .",
      description: "Th√™m t·∫•t c·∫£ file thay ƒë·ªïi v√†o staging area",
      icon: "‚ûï",
      example: "git add . ho·∫∑c git add filename.js"
    },
    {
      id: 4,
      title: "Commit thay ƒë·ªïi",
      command: 'git commit -m "message"',
      description: "L∆∞u snapshot c·ªßa code v·ªõi message m√¥ t·∫£",
      icon: "üíæ",
      example: 'git commit -m "Add new feature"'
    },
    {
      id: 5,
      title: "K·∫øt n·ªëi v·ªõi GitHub",
      command: "git remote add origin [URL]",
      description: "Li√™n k·∫øt local repo v·ªõi GitHub repository",
      icon: "üîó",
      example: "git remote add origin https://github.com/username/repo.git"
    },
    {
      id: 6,
      title: "Push code l√™n GitHub",
      command: "git push -u origin main",
      description: "ƒê·∫©y code t·ª´ local l√™n GitHub repository",
      icon: "üöÄ",
      example: "git push -u origin main"
    },
    {
      id: 7,
      title: "Pull code t·ª´ GitHub",
      command: "git pull origin main",
      description: "T·∫£i code m·ªõi nh·∫•t t·ª´ GitHub v·ªÅ local",
      icon: "‚¨áÔ∏è",
      example: "git pull origin main"
    },
    {
      id: 8,
      title: "Clone repository",
      command: "git clone [URL]",
      description: "T·∫£i to√†n b·ªô repository t·ª´ GitHub v·ªÅ m√°y local",
      icon: "üì•",
      example: "git clone https://github.com/username/repo.git"
    },
    {
      id: 9,
      title: "T·∫°o v√† chuy·ªÉn nh√°nh",
      command: "git checkout -b [branch-name]",
      description: "T·∫°o nh√°nh m·ªõi v√† chuy·ªÉn sang nh√°nh ƒë√≥",
      icon: "üåø",
      example: "git checkout -b feature/login"
    },
    {
      id: 10,
      title: "Merge nh√°nh",
      command: "git merge [branch-name]",
      description: "K·∫øt h·ª£p code t·ª´ nh√°nh kh√°c v√†o nh√°nh hi·ªán t·∫°i",
      icon: "üîÑ",
      example: "git merge feature/login"
    }
  ];

  /**
   * X·ª≠ l√Ω khi user click v√†o m·ªôt b∆∞·ªõc
   * @param {number} stepIndex - Index c·ªßa b∆∞·ªõc ƒë∆∞·ª£c click
   */
  const handleStepClick = (stepIndex) => {
    setCurrentStep(stepIndex);
    
    // ƒê√°nh d·∫•u b∆∞·ªõc n√†y ƒë√£ ho√†n th√†nh
    if (!completedSteps.includes(stepIndex)) {
      setCompletedSteps([...completedSteps, stepIndex]);
    }
  };

  /**
   * Copy command v√†o clipboard
   * @param {string} command - L·ªánh c·∫ßn copy
   */
  const copyToClipboard = (command) => {
    navigator.clipboard.writeText(command);
    // C√≥ th·ªÉ th√™m toast notification ·ªü ƒë√¢y
  };

  return (
    <div className="git-commands">
      <div className="commands-header">
        <h2>üìã C√°c b∆∞·ªõc th·ª±c hi·ªán Git</h2>
        <p>Click v√†o t·ª´ng b∆∞·ªõc ƒë·ªÉ xem chi ti·∫øt</p>
      </div>

      <div className="commands-container">
        {/* Sidebar - Danh s√°ch c√°c b∆∞·ªõc */}
        <div className="steps-sidebar">
          {gitSteps.map((step, index) => (
            <div
              key={step.id}
              className={`step-item ${
                currentStep === index ? 'active' : ''
              } ${
                completedSteps.includes(index) ? 'completed' : ''
              }`}
              onClick={() => handleStepClick(index)}
            >
              <div className="step-number">{step.id}</div>
              <div className="step-info">
                <span className="step-icon">{step.icon}</span>
                <span className="step-title">{step.title}</span>
              </div>
              {completedSteps.includes(index) && (
                <span className="check-mark">‚úÖ</span>
              )}
            </div>
          ))}
        </div>

        {/* Main content - Chi ti·∫øt b∆∞·ªõc hi·ªán t·∫°i */}
        <div className="step-detail">
          {gitSteps[currentStep] && (
            <div className="detail-card">
              <div className="detail-header">
                <span className="detail-icon">
                  {gitSteps[currentStep].icon}
                </span>
                <h3>{gitSteps[currentStep].title}</h3>
              </div>
              
              <div className="detail-content">
                <p className="description">
                  {gitSteps[currentStep].description}
                </p>
                
                {/* Command box */}
                <div className="command-box">
                  <div className="command-header">
                    <span>üíª L·ªánh:</span>
                    <button 
                      className="copy-btn"
                      onClick={() => copyToClipboard(gitSteps[currentStep].command)}
                      title="Copy command"
                    >
                      üìã
                    </button>
                  </div>
                  <code className="command-text">
                    {gitSteps[currentStep].command}
                  </code>
                </div>
                
                {/* Example */}
                <div className="example-box">
                  <span className="example-label">üìù V√≠ d·ª•:</span>
                  <code className="example-text">
                    {gitSteps[currentStep].example}
                  </code>
                </div>

                {/* Th√™m ph·∫ßn gi·∫£i th√≠ch chi ti·∫øt cho Clone */}
                {currentStep === 7 && (
                  <div className="clone-explanation">
                    <h4>üîç Chi ti·∫øt v·ªÅ Clone Repository</h4>
                    <p>
                      Clone l√† c√°ch nhanh nh·∫•t ƒë·ªÉ t·∫£i m·ªôt d·ª± √°n t·ª´ GitHub v·ªÅ m√°y t√≠nh c·ªßa b·∫°n. 
                      Khi clone, b·∫°n s·∫Ω c√≥:
                    </p>
                    <ul className="clone-benefits">
                      <li>‚úÖ To√†n b·ªô l·ªãch s·ª≠ commit</li>
                      <li>‚úÖ T·∫•t c·∫£ c√°c nh√°nh (branches)</li>
                      <li>‚úÖ T·∫•t c·∫£ c√°c tags</li>
                      <li>‚úÖ C·∫•u h√¨nh remote t·ª± ƒë·ªông</li>
                    </ul>
                    <div className="clone-steps">
                      <h5>C√°c b∆∞·ªõc clone repository:</h5>
                      <ol>
                        <li>Truy c·∫≠p v√†o repository tr√™n GitHub</li>
                        <li>Click v√†o n√∫t "Code" m√†u xanh</li>
                        <li>Copy URL (HTTPS ho·∫∑c SSH)</li>
                        <li>M·ªü terminal tr√™n m√°y t√≠nh</li>
                        <li>Di chuy·ªÉn ƒë·∫øn th∆∞ m·ª•c b·∫°n mu·ªën l∆∞u project</li>
                        <li>Ch·∫°y l·ªánh <code>git clone [URL]</code></li>
                      </ol>
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      </div>
      
      {/* Progress bar */}
      <div className="progress-section">
        <div className="progress-label">
          Ti·∫øn ƒë·ªô: {completedSteps.length}/{gitSteps.length} b∆∞·ªõc
        </div>
        <div className="progress-bar">
          <div 
            className="progress-fill"
            style={{ 
              width: `${(completedSteps.length / gitSteps.length) * 100}%` 
            }}
          ></div>
        </div>
      </div>
    </div>
  );
};

export default GitCommands;