import React, { useState } from 'react';
import './BasicCommands.css';

/**
 * Trang h∆∞·ªõng d·∫´n c√°c l·ªánh Git c∆° b·∫£n
 * Bao g·ªìm t·∫•t c·∫£ l·ªánh thi·∫øt y·∫øu v·ªõi v√≠ d·ª• th·ª±c t·∫ø
 */
const BasicCommands = () => {
  const [activeCommand, setActiveCommand] = useState(null);
  const [copiedCommand, setCopiedCommand] = useState('');

  // Danh s√°ch c√°c l·ªánh Git c∆° b·∫£n v·ªõi gi·∫£i th√≠ch chi ti·∫øt
  const gitCommands = [
    {
      id: 'config',
      category: 'C·∫•u h√¨nh',
      title: 'git config',
      description: 'C·∫•u h√¨nh th√¥ng tin ng∆∞·ªùi d√πng v√† c√°c thi·∫øt l·∫≠p Git',
      icon: '‚öôÔ∏è',
      commands: [
        {
          command: 'git config --global user.name "T√™n c·ªßa b·∫°n"',
          explanation: 'Thi·∫øt l·∫≠p t√™n ng∆∞·ªùi d√πng cho t·∫•t c·∫£ repository'
        },
        {
          command: 'git config --global user.email "email@example.com"',
          explanation: 'Thi·∫øt l·∫≠p email cho t·∫•t c·∫£ repository'
        },
        {
          command: 'git config --list',
          explanation: 'Xem t·∫•t c·∫£ c·∫•u h√¨nh hi·ªán t·∫°i'
        },
        {
          command: 'git config user.name',
          explanation: 'Xem t√™n ng∆∞·ªùi d√πng hi·ªán t·∫°i'
        }
      ],
      realExample: {
        scenario: 'L·∫ßn ƒë·∫ßu s·ª≠ d·ª•ng Git',
        steps: [
          'M·ªü terminal/command prompt',
          'Ch·∫°y: git config --global user.name "Nguy·ªÖn VƒÉn A"',
          'Ch·∫°y: git config --global user.email "nguyenvana@gmail.com"',
          'Ki·ªÉm tra: git config --list'
        ]
      }
    },
    {
      id: 'init',
      category: 'Kh·ªüi t·∫°o',
      title: 'git init',
      description: 'Kh·ªüi t·∫°o m·ªôt repository Git m·ªõi trong th∆∞ m·ª•c hi·ªán t·∫°i',
      icon: 'üöÄ',
      commands: [
        {
          command: 'git init',
          explanation: 'T·∫°o repository Git m·ªõi trong th∆∞ m·ª•c hi·ªán t·∫°i'
        },
        {
          command: 'git init t√™n-d·ª±-√°n',
          explanation: 'T·∫°o th∆∞ m·ª•c m·ªõi v√† kh·ªüi t·∫°o Git repository'
        },
        {
          command: 'git init --bare',
          explanation: 'T·∫°o bare repository (d√πng l√†m remote repository)'
        }
      ],
      realExample: {
        scenario: 'B·∫Øt ƒë·∫ßu d·ª± √°n m·ªõi',
        steps: [
          'T·∫°o th∆∞ m·ª•c d·ª± √°n: mkdir my-project',
          'V√†o th∆∞ m·ª•c: cd my-project',
          'Kh·ªüi t·∫°o Git: git init',
          'T·∫°o file ƒë·∫ßu ti√™n: echo "# My Project" > README.md'
        ]
      }
    },
    {
      id: 'status',
      category: 'Ki·ªÉm tra',
      title: 'git status',
      description: 'Xem tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa working directory v√† staging area',
      icon: 'üìä',
      commands: [
        {
          command: 'git status',
          explanation: 'Hi·ªÉn th·ªã tr·∫°ng th√°i ƒë·∫ßy ƒë·ªß c·ªßa repository'
        },
        {
          command: 'git status -s',
          explanation: 'Hi·ªÉn th·ªã tr·∫°ng th√°i ·ªü d·∫°ng ng·∫Øn g·ªçn'
        },
        {
          command: 'git status --porcelain',
          explanation: 'Hi·ªÉn th·ªã tr·∫°ng th√°i d·∫°ng machine-readable'
        }
      ],
      realExample: {
        scenario: 'Ki·ªÉm tra thay ƒë·ªïi tr∆∞·ªõc khi commit',
        steps: [
          'Ch·ªânh s·ª≠a file index.html',
          'Ch·∫°y: git status',
          'Th·∫•y file m√†u ƒë·ªè (ch∆∞a ƒë∆∞·ª£c add)',
          'Add file: git add index.html',
          'Ch·∫°y l·∫°i: git status (file m√†u xanh)'
        ]
      }
    },
    {
      id: 'add',
      category: 'Staging',
      title: 'git add',
      description: 'Th√™m file v√†o staging area ƒë·ªÉ chu·∫©n b·ªã commit',
      icon: '‚ûï',
      commands: [
        {
          command: 'git add t√™n-file.txt',
          explanation: 'Th√™m m·ªôt file c·ª• th·ªÉ v√†o staging area'
        },
        {
          command: 'git add .',
          explanation: 'Th√™m t·∫•t c·∫£ file trong th∆∞ m·ª•c hi·ªán t·∫°i'
        },
        {
          command: 'git add -A',
          explanation: 'Th√™m t·∫•t c·∫£ file (bao g·ªìm file ƒë√£ x√≥a)'
        },
        {
          command: 'git add *.js',
          explanation: 'Th√™m t·∫•t c·∫£ file JavaScript'
        },
        {
          command: 'git add -p',
          explanation: 'Th√™m t·ª´ng ph·∫ßn c·ªßa file (interactive mode)'
        }
      ],
      realExample: {
        scenario: 'Chu·∫©n b·ªã commit feature m·ªõi',
        steps: [
          'T·∫°o file: touch feature.js',
          'Ch·ªânh s·ª≠a: nano feature.js',
          'Add file: git add feature.js',
          'Ki·ªÉm tra: git status',
          'Commit: git commit -m "Add new feature"'
        ]
      }
    },
    {
      id: 'commit',
      category: 'L∆∞u tr·ªØ',
      title: 'git commit',
      description: 'L∆∞u c√°c thay ƒë·ªïi t·ª´ staging area v√†o repository',
      icon: 'üíæ',
      commands: [
        {
          command: 'git commit -m "M√¥ t·∫£ commit"',
          explanation: 'Commit v·ªõi message ng·∫Øn g·ªçn'
        },
        {
          command: 'git commit -am "Message"',
          explanation: 'Add v√† commit t·∫•t c·∫£ file ƒë√£ tracked'
        },
        {
          command: 'git commit --amend',
          explanation: 'S·ª≠a ƒë·ªïi commit cu·ªëi c√πng'
        },
        {
          command: 'git commit --amend -m "New message"',
          explanation: 'Thay ƒë·ªïi message c·ªßa commit cu·ªëi'
        }
      ],
      realExample: {
        scenario: 'Commit feature ho√†n ch·ªânh',
        steps: [
          'Ho√†n th√†nh code feature',
          'Add files: git add .',
          'Commit: git commit -m "feat: add user authentication"',
          'Ki·ªÉm tra: git log --oneline'
        ]
      }
    },
    {
      id: 'log',
      category: 'L·ªãch s·ª≠',
      title: 'git log',
      description: 'Xem l·ªãch s·ª≠ commit c·ªßa repository',
      icon: 'üìú',
      commands: [
        {
          command: 'git log',
          explanation: 'Hi·ªÉn th·ªã l·ªãch s·ª≠ commit ƒë·∫ßy ƒë·ªß'
        },
        {
          command: 'git log --oneline',
          explanation: 'Hi·ªÉn th·ªã m·ªói commit tr√™n m·ªôt d√≤ng'
        },
        {
          command: 'git log --graph',
          explanation: 'Hi·ªÉn th·ªã d·∫°ng ƒë·ªì th·ªã ASCII'
        },
        {
          command: 'git log --author="T√™n t√°c gi·∫£"',
          explanation: 'L·ªçc commit theo t√°c gi·∫£'
        },
        {
          command: 'git log --since="2 weeks ago"',
          explanation: 'L·ªçc commit theo th·ªùi gian'
        }
      ],
      realExample: {
        scenario: 'T√¨m commit g√¢y bug',
        steps: [
          'Xem l·ªãch s·ª≠: git log --oneline',
          'T√¨m commit nghi ng·ªù: git log --author="John"',
          'Xem chi ti·∫øt: git show commit-hash',
          'So s√°nh: git diff commit1 commit2'
        ]
      }
    },
    {
      id: 'diff',
      category: 'So s√°nh',
      title: 'git diff',
      description: 'So s√°nh s·ª± kh√°c bi·ªát gi·ªØa c√°c phi√™n b·∫£n',
      icon: 'üîç',
      commands: [
        {
          command: 'git diff',
          explanation: 'So s√°nh working directory v·ªõi staging area'
        },
        {
          command: 'git diff --staged',
          explanation: 'So s√°nh staging area v·ªõi commit cu·ªëi'
        },
        {
          command: 'git diff HEAD',
          explanation: 'So s√°nh working directory v·ªõi commit cu·ªëi'
        },
        {
          command: 'git diff commit1 commit2',
          explanation: 'So s√°nh hai commit'
        }
      ],
      realExample: {
        scenario: 'Ki·ªÉm tra thay ƒë·ªïi tr∆∞·ªõc khi commit',
        steps: [
          'Ch·ªânh s·ª≠a file app.js',
          'Xem thay ƒë·ªïi: git diff app.js',
          'Add file: git add app.js',
          'Xem staged changes: git diff --staged'
        ]
      }
    },
    {
      id: 'remote',
      category: 'Remote',
      title: 'git remote',
      description: 'Qu·∫£n l√Ω c√°c remote repository',
      icon: 'üåê',
      commands: [
        {
          command: 'git remote add origin URL',
          explanation: 'Th√™m remote repository v·ªõi t√™n "origin"'
        },
        {
          command: 'git remote -v',
          explanation: 'Xem danh s√°ch remote repositories'
        },
        {
          command: 'git remote remove origin',
          explanation: 'X√≥a remote repository'
        },
        {
          command: 'git remote rename old-name new-name',
          explanation: 'ƒê·ªïi t√™n remote repository'
        }
      ],
      realExample: {
        scenario: 'K·∫øt n·ªëi v·ªõi GitHub repository',
        steps: [
          'T·∫°o repo tr√™n GitHub',
          'Copy URL repository',
          'Add remote: git remote add origin https://github.com/user/repo.git',
          'Ki·ªÉm tra: git remote -v'
        ]
      }
    },
    {
      id: 'push',
      category: 'ƒê·ªìng b·ªô',
      title: 'git push',
      description: 'ƒê·∫©y commit t·ª´ local repository l√™n remote repository',
      icon: '‚¨ÜÔ∏è',
      commands: [
        {
          command: 'git push origin main',
          explanation: 'Push nh√°nh main l√™n remote origin'
        },
        {
          command: 'git push -u origin main',
          explanation: 'Push v√† set upstream cho nh√°nh main'
        },
        {
          command: 'git push --all',
          explanation: 'Push t·∫•t c·∫£ nh√°nh'
        },
        {
          command: 'git push --force',
          explanation: 'Force push (nguy hi·ªÉm - ghi ƒë√® l·ªãch s·ª≠)'
        }
      ],
      realExample: {
        scenario: 'ƒê·∫©y code l√™n GitHub l·∫ßn ƒë·∫ßu',
        steps: [
          'Commit code: git commit -m "Initial commit"',
          'Add remote: git remote add origin URL',
          'Push: git push -u origin main',
          'Ki·ªÉm tra tr√™n GitHub'
        ]
      }
    },
    {
      id: 'pull',
      category: 'ƒê·ªìng b·ªô',
      title: 'git pull',
      description: 'K√©o v√† merge thay ƒë·ªïi t·ª´ remote repository',
      icon: '‚¨áÔ∏è',
      commands: [
        {
          command: 'git pull',
          explanation: 'Pull t·ª´ remote ƒë√£ set upstream'
        },
        {
          command: 'git pull origin main',
          explanation: 'Pull nh√°nh main t·ª´ remote origin'
        },
        {
          command: 'git pull --rebase',
          explanation: 'Pull v√† rebase thay v√¨ merge'
        },
        {
          command: 'git pull --no-commit',
          explanation: 'Pull nh∆∞ng kh√¥ng t·ª± ƒë·ªông commit'
        }
      ],
      realExample: {
        scenario: 'C·∫≠p nh·∫≠t code t·ª´ team',
        steps: [
          'Ki·ªÉm tra nh√°nh: git branch',
          'Chuy·ªÉn v·ªÅ main: git checkout main',
          'Pull updates: git pull origin main',
          'Ki·ªÉm tra log: git log --oneline'
        ]
      }
    }
  ];

  // Copy command to clipboard
  const copyToClipboard = (command) => {
    navigator.clipboard.writeText(command);
    setCopiedCommand(command);
    setTimeout(() => setCopiedCommand(''), 2000);
  };

  return (
    <div className="basic-commands-container">
      {/* Header */}
      <div className="page-header">
        <h1>‚ö° L·ªánh Git C∆° B·∫£n</h1>
        <p>T·∫•t c·∫£ l·ªánh Git thi·∫øt y·∫øu m√† m·ªçi developer c·∫ßn bi·∫øt</p>
      </div>

      {/* Quick Reference */}
      <div className="quick-reference">
        <h2>üöÄ Quick Reference</h2>
        <div className="quick-commands">
          <div className="quick-command">
            <span className="command">git init</span>
            <span className="description">Kh·ªüi t·∫°o repo</span>
          </div>
          <div className="quick-command">
            <span className="command">git add .</span>
            <span className="description">Add t·∫•t c·∫£ file</span>
          </div>
          <div className="quick-command">
            <span className="command">git commit -m "msg"</span>
            <span className="description">Commit v·ªõi message</span>
          </div>
          <div className="quick-command">
            <span className="command">git push</span>
            <span className="description">ƒê·∫©y l√™n remote</span>
          </div>
        </div>
      </div>

      {/* Commands List */}
      <div className="commands-grid">
        {gitCommands.map((cmd) => (
          <div 
            key={cmd.id} 
            className={`command-card ${activeCommand === cmd.id ? 'active' : ''}`}
            onClick={() => setActiveCommand(activeCommand === cmd.id ? null : cmd.id)}
          >
            <div className="command-header">
              <div className="command-icon">{cmd.icon}</div>
              <div className="command-info">
                <div className="command-category">{cmd.category}</div>
                <h3 className="command-title">{cmd.title}</h3>
                <p className="command-description">{cmd.description}</p>
              </div>
              <div className="expand-icon">
                {activeCommand === cmd.id ? '‚àí' : '+'}
              </div>
            </div>

            {activeCommand === cmd.id && (
              <div className="command-details">
                <div className="commands-section">
                  <h4>üìù C√°c l·ªánh:</h4>
                  {cmd.commands.map((item, index) => (
                    <div key={index} className="command-item">
                      <div className="command-line">
                        <code>{item.command}</code>
                        <button 
                          className="copy-btn"
                          onClick={(e) => {
                            e.stopPropagation();
                            copyToClipboard(item.command);
                          }}
                        >
                          {copiedCommand === item.command ? '‚úÖ' : 'üìã'}
                        </button>
                      </div>
                      <p className="command-explanation">{item.explanation}</p>
                    </div>
                  ))}
                </div>

                <div className="example-section">
                  <h4>üéØ V√≠ d·ª• th·ª±c t·∫ø:</h4>
                  <div className="scenario">
                    <h5>T√¨nh hu·ªëng: {cmd.realExample.scenario}</h5>
                    <ol className="steps-list">
                      {cmd.realExample.steps.map((step, index) => (
                        <li key={index}>{step}</li>
                      ))}
                    </ol>
                  </div>
                </div>
              </div>
            )}
          </div>
        ))}
      </div>

      {/* Git Workflow */}
      <div className="workflow-section">
        <h2>üîÑ Git Workflow C∆° B·∫£n</h2>
        <div className="workflow-diagram">
          <div className="workflow-step">
            <div className="step-number">1</div>
            <div className="step-content">
              <h4>Working Directory</h4>
              <p>Ch·ªânh s·ª≠a file</p>
              <code>nano file.txt</code>
            </div>
          </div>
          <div className="workflow-arrow">‚Üí</div>
          <div className="workflow-step">
            <div className="step-number">2</div>
            <div className="step-content">
              <h4>Staging Area</h4>
              <p>Add file</p>
              <code>git add file.txt</code>
            </div>
          </div>
          <div className="workflow-arrow">‚Üí</div>
          <div className="workflow-step">
            <div className="step-number">3</div>
            <div className="step-content">
              <h4>Repository</h4>
              <p>Commit</p>
              <code>git commit -m "msg"</code>
            </div>
          </div>
          <div className="workflow-arrow">‚Üí</div>
          <div className="workflow-step">
            <div className="step-number">4</div>
            <div className="step-content">
              <h4>Remote</h4>
              <p>Push</p>
              <code>git push</code>
            </div>
          </div>
        </div>
      </div>

      {/* Best Practices */}
      <div className="best-practices">
        <h2>‚ú® Best Practices</h2>
        <div className="practices-grid">
          <div className="practice-item">
            <div className="practice-icon">üí¨</div>
            <h4>Commit Messages</h4>
            <ul>
              <li>S·ª≠ d·ª•ng present tense: "Add feature" thay v√¨ "Added feature"</li>
              <li>Gi·ªõi h·∫°n 50 k√Ω t·ª± cho title</li>
              <li>S·ª≠ d·ª•ng prefix: feat:, fix:, docs:, style:</li>
            </ul>
          </div>
          <div className="practice-item">
            <div className="practice-icon">üîÑ</div>
            <h4>Commit Frequency</h4>
            <ul>
              <li>Commit th∆∞·ªùng xuy√™n v·ªõi c√°c thay ƒë·ªïi nh·ªè</li>
              <li>M·ªói commit n√™n c√≥ m·ªôt m·ª•c ƒë√≠ch r√µ r√†ng</li>
              <li>Kh√¥ng commit code ch∆∞a ho√†n th√†nh</li>
            </ul>
          </div>
          <div className="practice-item">
            <div className="practice-icon">üõ°Ô∏è</div>
            <h4>Safety</h4>
            <ul>
              <li>Lu√¥n pull tr∆∞·ªõc khi push</li>
              <li>Ki·ªÉm tra git status tr∆∞·ªõc khi commit</li>
              <li>Backup code quan tr·ªçng</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

export default BasicCommands;