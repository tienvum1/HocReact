import React, { useState } from 'react';
import './Clone.css';

/**
 * Trang h∆∞·ªõng d·∫´n v·ªÅ Git Clone
 * Bao g·ªìm c√°c c√°ch clone repository v√† best practices
 */
function Clone() {
  const [activeMethod, setActiveMethod] = useState('https');

  const cloneMethods = {
    https: {
      title: 'üîó HTTPS Clone',
      description: 'Ph∆∞∆°ng ph√°p ph·ªï bi·∫øn nh·∫•t, d·ªÖ s·ª≠ d·ª•ng v√† kh√¥ng c·∫ßn c·∫•u h√¨nh SSH',
      command: 'git clone https://github.com/username/repository.git',
      pros: [
        'D·ªÖ s·ª≠ d·ª•ng, kh√¥ng c·∫ßn setup',
        'Ho·∫°t ƒë·ªông qua firewall',
        'H·ªó tr·ª£ authentication token'
      ],
      cons: [
        'C·∫ßn nh·∫≠p username/password m·ªói l·∫ßn',
        'Ch·∫≠m h∆°n SSH m·ªôt ch√∫t'
      ],
      steps: [
        'Copy URL t·ª´ GitHub/GitLab',
        'M·ªü terminal t·∫°i th∆∞ m·ª•c mu·ªën clone',
        'Ch·∫°y l·ªánh git clone v·ªõi URL',
        'Nh·∫≠p credentials n·∫øu repository private'
      ]
    },
    ssh: {
      title: 'üîê SSH Clone',
      description: 'Ph∆∞∆°ng ph√°p b·∫£o m·∫≠t cao, nhanh v√† kh√¥ng c·∫ßn nh·∫≠p password',
      command: 'git clone git@github.com:username/repository.git',
      pros: [
        'B·∫£o m·∫≠t cao v·ªõi key pair',
        'Kh√¥ng c·∫ßn nh·∫≠p password',
        'Nhanh h∆°n HTTPS'
      ],
      cons: [
        'C·∫ßn setup SSH key tr∆∞·ªõc',
        'Ph·ª©c t·∫°p h∆°n cho ng∆∞·ªùi m·ªõi'
      ],
      steps: [
        'T·∫°o SSH key: ssh-keygen -t rsa -b 4096',
        'Add SSH key v√†o GitHub/GitLab',
        'Copy SSH URL t·ª´ repository',
        'Ch·∫°y l·ªánh git clone v·ªõi SSH URL'
      ]
    },
    github: {
      title: 'üì± GitHub CLI',
      description: 'S·ª≠ d·ª•ng GitHub CLI ƒë·ªÉ clone repository m·ªôt c√°ch ti·ªán l·ª£i',
      command: 'gh repo clone username/repository',
      pros: [
        'T√≠ch h·ª£p t·ªët v·ªõi GitHub',
        'Syntax ng·∫Øn g·ªçn',
        'T·ª± ƒë·ªông authentication'
      ],
      cons: [
        'Ch·ªâ ho·∫°t ƒë·ªông v·ªõi GitHub',
        'C·∫ßn c√†i ƒë·∫∑t GitHub CLI'
      ],
      steps: [
        'C√†i ƒë·∫∑t GitHub CLI',
        'Login: gh auth login',
        'Clone: gh repo clone username/repo',
        'Ho·∫∑c: gh repo clone URL'
      ]
    }
  };

  const cloneOptions = [
    {
      option: '--depth 1',
      description: 'Shallow clone - ch·ªâ l·∫•y commit m·ªõi nh·∫•t',
      example: 'git clone --depth 1 https://github.com/user/repo.git',
      useCase: 'Ti·∫øt ki·ªám bandwidth, ph√π h·ª£p khi ch·ªâ c·∫ßn code m·ªõi nh·∫•t'
    },
    {
      option: '--branch <name>',
      description: 'Clone m·ªôt branch c·ª• th·ªÉ',
      example: 'git clone --branch develop https://github.com/user/repo.git',
      useCase: 'Khi mu·ªën l√†m vi·ªác v·ªõi branch kh√°c main/master'
    },
    {
      option: '--single-branch',
      description: 'Ch·ªâ clone m·ªôt branch duy nh·∫•t',
      example: 'git clone --single-branch --branch main https://github.com/user/repo.git',
      useCase: 'Ti·∫øt ki·ªám dung l∆∞·ª£ng khi repository c√≥ nhi·ªÅu branch'
    },
    {
      option: '--recursive',
      description: 'Clone c·∫£ submodules',
      example: 'git clone --recursive https://github.com/user/repo.git',
      useCase: 'Khi repository c√≥ submodules c·∫ßn thi·∫øt'
    }
  ];

  const troubleshooting = [
    {
      problem: 'Permission denied (publickey)',
      solution: 'Ki·ªÉm tra SSH key ƒë√£ ƒë∆∞·ª£c add v√†o GitHub ch∆∞a',
      commands: ['ssh -T git@github.com', 'ssh-add ~/.ssh/id_rsa']
    },
    {
      problem: 'Repository not found',
      solution: 'Ki·ªÉm tra URL v√† quy·ªÅn truy c·∫≠p repository',
      commands: ['git remote -v', 'git remote set-url origin <correct-url>']
    },
    {
      problem: 'SSL certificate problem',
      solution: 'C·∫•u h√¨nh SSL ho·∫∑c s·ª≠ d·ª•ng HTTP thay HTTPS',
      commands: ['git config --global http.sslverify false']
    }
  ];

  return (
    <div className="clone-page">
      <div className="page-header">
        <h1>üì• Git Clone</h1>
        <p>H∆∞·ªõng d·∫´n chi ti·∫øt c√°ch clone repository t·ª´ GitHub, GitLab v√† c√°c platform kh√°c</p>
      </div>

      {/* Clone Methods */}
      <div className="clone-methods">
        <h2>üöÄ Ph∆∞∆°ng ph√°p Clone</h2>
        <div className="method-tabs">
          {Object.entries(cloneMethods).map(([key, method]) => (
            <button
              key={key}
              className={`method-tab ${activeMethod === key ? 'active' : ''}`}
              onClick={() => setActiveMethod(key)}
            >
              {method.title}
            </button>
          ))}
        </div>

        <div className="method-content">
          <div className="method-info">
            <h3>{cloneMethods[activeMethod].title}</h3>
            <p className="method-description">{cloneMethods[activeMethod].description}</p>
            
            <div className="command-showcase">
              <h4>L·ªánh c∆° b·∫£n:</h4>
              <code className="main-command">{cloneMethods[activeMethod].command}</code>
            </div>

            <div className="pros-cons">
              <div className="pros">
                <h4>‚úÖ ∆Øu ƒëi·ªÉm:</h4>
                <ul>
                  {cloneMethods[activeMethod].pros.map((pro, index) => (
                    <li key={index}>{pro}</li>
                  ))}
                </ul>
              </div>
              <div className="cons">
                <h4>‚ùå Nh∆∞·ª£c ƒëi·ªÉm:</h4>
                <ul>
                  {cloneMethods[activeMethod].cons.map((con, index) => (
                    <li key={index}>{con}</li>
                  ))}
                </ul>
              </div>
            </div>

            <div className="steps-guide">
              <h4>üìã C√°c b∆∞·ªõc th·ª±c hi·ªán:</h4>
              <ol>
                {cloneMethods[activeMethod].steps.map((step, index) => (
                  <li key={index}>{step}</li>
                ))}
              </ol>
            </div>
          </div>
        </div>
      </div>

      {/* Clone Options */}
      <div className="clone-options">
        <h2>‚öôÔ∏è T√πy ch·ªçn Clone</h2>
        <div className="options-grid">
          {cloneOptions.map((option, index) => (
            <div key={index} className="option-card">
              <h3>
                <code className="option-name">{option.option}</code>
              </h3>
              <p className="option-description">{option.description}</p>
              <div className="option-example">
                <strong>V√≠ d·ª•:</strong>
                <code>{option.example}</code>
              </div>
              <div className="option-usecase">
                <strong>Khi n√†o d√πng:</strong>
                <span>{option.useCase}</span>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Quick Start Guide */}
      <div className="quick-start">
        <h2>‚ö° Quick Start</h2>
        <div className="quick-steps">
          <div className="quick-step">
            <div className="step-number">1</div>
            <div className="step-content">
              <h4>T√¨m Repository URL</h4>
              <p>V√†o trang GitHub/GitLab, click n√∫t "Code" v√† copy URL</p>
            </div>
          </div>
          <div className="quick-step">
            <div className="step-number">2</div>
            <div className="step-content">
              <h4>M·ªü Terminal</h4>
              <p>ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn th∆∞ m·ª•c mu·ªën l∆∞u project</p>
              <code>cd ~/Documents/Projects</code>
            </div>
          </div>
          <div className="quick-step">
            <div className="step-number">3</div>
            <div className="step-content">
              <h4>Ch·∫°y l·ªánh Clone</h4>
              <code>git clone &lt;repository-url&gt;</code>
            </div>
          </div>
          <div className="quick-step">
            <div className="step-number">4</div>
            <div className="step-content">
              <h4>V√†o th∆∞ m·ª•c project</h4>
              <code>cd repository-name</code>
            </div>
          </div>
        </div>
      </div>

      {/* Troubleshooting */}
      <div className="troubleshooting">
        <h2>üîß X·ª≠ l√Ω s·ª± c·ªë</h2>
        <div className="trouble-list">
          {troubleshooting.map((trouble, index) => (
            <div key={index} className="trouble-item">
              <h4 className="trouble-problem">‚ùå {trouble.problem}</h4>
              <p className="trouble-solution">üí° {trouble.solution}</p>
              <div className="trouble-commands">
                {trouble.commands.map((command, cmdIndex) => (
                  <code key={cmdIndex}>{command}</code>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

export default Clone;