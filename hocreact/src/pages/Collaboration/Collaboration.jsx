import React, { useState } from 'react';
import './Collaboration.css';

/**
 * Trang h∆∞·ªõng d·∫´n v·ªÅ Git Collaboration
 * Bao g·ªìm l√†m vi·ªác nh√≥m, conflict resolution, v√† code review
 */
function Collaboration() {
  const [activeTab, setActiveTab] = useState('teamwork');

  const collaborationTopics = {
    teamwork: {
      title: 'üë• L√†m vi·ªác nh√≥m',
      content: [
        {
          title: 'Remote Repository Setup',
          commands: [
            'git remote add origin <repository-url>',
            'git remote -v',
            'git remote set-url origin <new-url>'
          ],
          description: 'Thi·∫øt l·∫≠p v√† qu·∫£n l√Ω remote repository ƒë·ªÉ chia s·∫ª code v·ªõi team.'
        },
        {
          title: 'Fetch & Pull',
          commands: [
            'git fetch origin',
            'git pull origin main',
            'git pull --rebase origin main'
          ],
          description: 'C·∫≠p nh·∫≠t code m·ªõi nh·∫•t t·ª´ remote repository tr∆∞·ªõc khi l√†m vi·ªác.'
        },
        {
          title: 'Push Changes',
          commands: [
            'git push origin main',
            'git push -u origin feature-branch',
            'git push --force-with-lease origin branch'
          ],
          description: 'ƒê·∫©y thay ƒë·ªïi l√™n remote repository ƒë·ªÉ chia s·∫ª v·ªõi team.'
        }
      ]
    },
    conflicts: {
      title: '‚öîÔ∏è X·ª≠ l√Ω Conflict',
      content: [
        {
          title: 'Merge Conflicts',
          commands: [
            'git status',
            'git diff',
            'git add <resolved-file>',
            'git commit'
          ],
          description: 'X·ª≠ l√Ω xung ƒë·ªôt khi merge code t·ª´ nhi·ªÅu ngu·ªìn kh√°c nhau.'
        },
        {
          title: 'Conflict Resolution Tools',
          commands: [
            'git mergetool',
            'git checkout --ours <file>',
            'git checkout --theirs <file>'
          ],
          description: 'S·ª≠ d·ª•ng c√°c c√¥ng c·ª• ƒë·ªÉ gi·∫£i quy·∫øt conflict hi·ªáu qu·∫£.'
        },
        {
          title: 'Abort Merge',
          commands: [
            'git merge --abort',
            'git reset --hard HEAD',
            'git clean -fd'
          ],
          description: 'H·ªßy b·ªè merge khi g·∫∑p v·∫•n ƒë·ªÅ v√† quay v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu.'
        }
      ]
    },
    review: {
      title: 'üîç Code Review',
      content: [
        {
          title: 'Pull Request Workflow',
          commands: [
            'git checkout -b feature/new-feature',
            'git push -u origin feature/new-feature',
            '# Create PR on GitHub/GitLab'
          ],
          description: 'Quy tr√¨nh t·∫°o Pull Request ƒë·ªÉ review code tr∆∞·ªõc khi merge.'
        },
        {
          title: 'Review Commands',
          commands: [
            'git log --oneline',
            'git show <commit-hash>',
            'git diff main..feature-branch'
          ],
          description: 'C√°c l·ªánh ƒë·ªÉ review v√† ki·ªÉm tra thay ƒë·ªïi trong code.'
        },
        {
          title: 'Feedback Integration',
          commands: [
            'git commit --amend',
            'git rebase -i HEAD~3',
            'git push --force-with-lease'
          ],
          description: 'T√≠ch h·ª£p feedback t·ª´ code review v√†o branch.'
        }
      ]
    }
  };

  const bestPractices = [
    {
      icon: 'üìù',
      title: 'Commit Messages',
      description: 'Vi·∫øt commit message r√µ r√†ng v√† c√≥ √Ω nghƒ©a',
      example: 'feat: add user authentication\nfix: resolve login validation bug'
    },
    {
      icon: 'üåø',
      title: 'Branch Strategy',
      description: 'S·ª≠ d·ª•ng Git Flow ho·∫∑c GitHub Flow',
      example: 'main ‚Üí develop ‚Üí feature/user-auth'
    },
    {
      icon: 'üîÑ',
      title: 'Regular Sync',
      description: 'Th∆∞·ªùng xuy√™n pull code m·ªõi t·ª´ main branch',
      example: 'git pull origin main (h√†ng ng√†y)'
    },
    {
      icon: 'üß™',
      title: 'Testing',
      description: 'Test k·ªπ tr∆∞·ªõc khi push code',
      example: 'npm test && git push'
    }
  ];

  return (
    <div className="collaboration-page">
      <div className="page-header">
        <h1>üë• Git Collaboration</h1>
        <p>L√†m vi·ªác nh√≥m hi·ªáu qu·∫£ v·ªõi Git - t·ª´ c∆° b·∫£n ƒë·∫øn chuy√™n nghi·ªáp</p>
      </div>

      {/* Navigation Tabs */}
      <div className="collaboration-tabs">
        {Object.entries(collaborationTopics).map(([key, topic]) => (
          <button
            key={key}
            className={`tab ${activeTab === key ? 'active' : ''}`}
            onClick={() => setActiveTab(key)}
          >
            {topic.title}
          </button>
        ))}
      </div>

      {/* Tab Content */}
      <div className="tab-content">
        <div className="content-grid">
          {collaborationTopics[activeTab].content.map((section, index) => (
            <div key={index} className="content-card">
              <h3>{section.title}</h3>
              <p className="section-description">{section.description}</p>
              <div className="commands-container">
                {section.commands.map((command, cmdIndex) => (
                  <code key={cmdIndex} className="command-line">
                    {command}
                  </code>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Best Practices Section */}
      <div className="best-practices">
        <h2>‚ú® Best Practices</h2>
        <div className="practices-grid">
          {bestPractices.map((practice, index) => (
            <div key={index} className="practice-card">
              <div className="practice-icon">{practice.icon}</div>
              <h3>{practice.title}</h3>
              <p>{practice.description}</p>
              <div className="practice-example">
                <strong>V√≠ d·ª•:</strong>
                <code>{practice.example}</code>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Conflict Resolution Guide */}
      <div className="conflict-guide">
        <h2>‚öîÔ∏è H∆∞·ªõng d·∫´n x·ª≠ l√Ω Conflict</h2>
        <div className="conflict-steps">
          <div className="conflict-step">
            <div className="step-number">1</div>
            <div className="step-content">
              <h4>Ph√°t hi·ªán Conflict</h4>
              <code>git status</code>
              <p>Git s·∫Ω hi·ªÉn th·ªã c√°c file b·ªã conflict</p>
            </div>
          </div>
          <div className="conflict-step">
            <div className="step-number">2</div>
            <div className="step-content">
              <h4>M·ªü file v√† s·ª≠a</h4>
              <div className="conflict-example">
                <pre>{`<<<<<<< HEAD
Your changes
=======
Their changes
>>>>>>> branch-name`}</pre>
              </div>
              <p>Ch·ªçn code n√†o gi·ªØ l·∫°i ho·∫∑c k·∫øt h·ª£p c·∫£ hai</p>
            </div>
          </div>
          <div className="conflict-step">
            <div className="step-number">3</div>
            <div className="step-content">
              <h4>Add v√† Commit</h4>
              <code>git add .</code>
              <code>git commit -m "Resolve merge conflict"</code>
              <p>Ho√†n t·∫•t vi·ªác gi·∫£i quy·∫øt conflict</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default Collaboration;