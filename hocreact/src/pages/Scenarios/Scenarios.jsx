import React, { useState } from 'react';
import './Scenarios.css';

/**
 * Trang hi·ªÉn th·ªã c√°c t√¨nh hu·ªëng th·ª±c t·∫ø khi s·ª≠ d·ª•ng Git
 * Bao g·ªìm c√°c v·∫•n ƒë·ªÅ th∆∞·ªùng g·∫∑p v√† c√°ch gi·∫£i quy·∫øt
 */
const Scenarios = () => {
  const [activeScenario, setActiveScenario] = useState(0);
  const [expandedSolution, setExpandedSolution] = useState(null);

  // Danh s√°ch c√°c t√¨nh hu·ªëng th·ª±c t·∫ø
  const scenarios = [
    {
      id: 1,
      title: "üö® Commit nh·∫ßm file kh√¥ng mong mu·ªën",
      problem: "B·∫°n ƒë√£ commit file .env ho·∫∑c node_modules v√†o repository",
      difficulty: "D·ªÖ",
      category: "Commit",
      situation: {
        description: "B·∫°n v·ª´a ch·∫°y git add . v√† git commit m√† kh√¥ng ki·ªÉm tra k·ªπ, k·∫øt qu·∫£ l√† c√°c file nh·∫°y c·∫£m nh∆∞ .env, node_modules, ho·∫∑c file build ƒë√£ ƒë∆∞·ª£c commit.",
        impact: "C√≥ th·ªÉ l√†m l·ªô th√¥ng tin b·∫£o m·∫≠t ho·∫∑c l√†m repository tr·ªü n√™n n·∫∑ng n·ªÅ"
      },
      solutions: [
        {
          method: "Unstage file tr∆∞·ªõc khi commit",
          commands: [
            "git reset HEAD <file>",
            "git commit -m 'Your message'"
          ],
          explanation: "N·∫øu b·∫°n ch∆∞a commit, h√£y unstage file kh√¥ng mong mu·ªën"
        },
        {
          method: "X√≥a file kh·ªèi commit cu·ªëi",
          commands: [
            "git reset --soft HEAD~1",
            "git reset HEAD <file>",
            "git commit -m 'Your message'"
          ],
          explanation: "Quay l·∫°i commit tr∆∞·ªõc ƒë√≥ v√† lo·∫°i b·ªè file kh√¥ng mong mu·ªën"
        },
        {
          method: "S·ª≠ d·ª•ng .gitignore",
          commands: [
            "echo 'node_modules/' >> .gitignore",
            "echo '.env' >> .gitignore",
            "git rm --cached <file>",
            "git commit -m 'Remove ignored files'"
          ],
          explanation: "Th√™m file v√†o .gitignore v√† x√≥a kh·ªèi tracking"
        }
      ],
      prevention: [
        "Lu√¥n ki·ªÉm tra git status tr∆∞·ªõc khi commit",
        "S·ª≠ d·ª•ng .gitignore t·ª´ ƒë·∫ßu d·ª± √°n",
        "D√πng git add <specific-file> thay v√¨ git add ."
      ]
    },
    {
      id: 2,
      title: "üîÑ Conflict khi merge branch",
      problem: "Xu·∫•t hi·ªán conflict khi merge branch feature v√†o main",
      difficulty: "Trung b√¨nh",
      category: "Merge",
      situation: {
        description: "B·∫°n ƒëang l√†m vi·ªác tr√™n branch feature, trong khi ƒë√≥ c√≥ ng∆∞·ªùi kh√°c ƒë√£ thay ƒë·ªïi c√πng file tr√™n branch main. Khi merge s·∫Ω xu·∫•t hi·ªán conflict.",
        impact: "Code kh√¥ng th·ªÉ merge t·ª± ƒë·ªông, c·∫ßn can thi·ªáp th·ªß c√¥ng"
      },
      solutions: [
        {
          method: "Gi·∫£i quy·∫øt conflict th·ªß c√¥ng",
          commands: [
            "git checkout main",
            "git pull origin main",
            "git checkout feature-branch",
            "git merge main",
            "# S·ª≠a conflict trong editor",
            "git add .",
            "git commit -m 'Resolve merge conflict'"
          ],
          explanation: "Merge main v√†o feature branch tr∆∞·ªõc, gi·∫£i quy·∫øt conflict, r·ªìi merge ng∆∞·ª£c l·∫°i"
        },
        {
          method: "S·ª≠ d·ª•ng rebase",
          commands: [
            "git checkout feature-branch",
            "git rebase main",
            "# S·ª≠a conflict n·∫øu c√≥",
            "git add .",
            "git rebase --continue",
            "git checkout main",
            "git merge feature-branch"
          ],
          explanation: "Rebase t·∫°o l·ªãch s·ª≠ commit s·∫°ch h∆°n"
        },
        {
          method: "S·ª≠ d·ª•ng merge tool",
          commands: [
            "git config --global merge.tool vimdiff",
            "git mergetool",
            "git commit -m 'Resolve conflict with mergetool'"
          ],
          explanation: "S·ª≠ d·ª•ng c√¥ng c·ª• merge tr·ª±c quan"
        }
      ],
      prevention: [
        "Th∆∞·ªùng xuy√™n pull main v√†o feature branch",
        "Chia nh·ªè feature th√†nh c√°c commit nh·ªè",
        "Communicate v·ªõi team v·ªÅ file ƒëang l√†m vi·ªác"
      ]
    },
    {
      id: 3,
      title: "‚è™ Mu·ªën quay l·∫°i commit tr∆∞·ªõc ƒë√≥",
      problem: "Commit m·ªõi c√≥ bug, c·∫ßn quay l·∫°i phi√™n b·∫£n ·ªïn ƒë·ªãnh",
      difficulty: "Trung b√¨nh",
      category: "Reset",
      situation: {
        description: "Sau khi deploy, b·∫°n ph√°t hi·ªán commit m·ªõi c√≥ bug nghi√™m tr·ªçng. C·∫ßn quay l·∫°i commit tr∆∞·ªõc ƒë√≥ ngay l·∫≠p t·ª©c.",
        impact: "·ª®ng d·ª•ng c√≥ th·ªÉ b·ªã l·ªói, ·∫£nh h∆∞·ªüng ƒë·∫øn user"
      },
      solutions: [
        {
          method: "Soft reset (gi·ªØ l·∫°i changes)",
          commands: [
            "git log --oneline",
            "git reset --soft HEAD~1",
            "# S·ª≠a code",
            "git commit -m 'Fix bug'"
          ],
          explanation: "Quay l·∫°i commit tr∆∞·ªõc nh∆∞ng gi·ªØ l·∫°i thay ƒë·ªïi ƒë·ªÉ s·ª≠a"
        },
        {
          method: "Hard reset (x√≥a h·∫øt changes)",
          commands: [
            "git log --oneline",
            "git reset --hard HEAD~1",
            "git push --force-with-lease origin main"
          ],
          explanation: "X√≥a ho√†n to√†n commit c√≥ bug (nguy hi·ªÉm!)"
        },
        {
          method: "Revert (t·∫°o commit m·ªõi)",
          commands: [
            "git log --oneline",
            "git revert <commit-hash>",
            "git push origin main"
          ],
          explanation: "T·∫°o commit m·ªõi ƒë·ªÉ undo thay ƒë·ªïi (an to√†n h∆°n)"
        }
      ],
      prevention: [
        "Test k·ªπ tr∆∞·ªõc khi commit",
        "S·ª≠ d·ª•ng CI/CD ƒë·ªÉ test t·ª± ƒë·ªông",
        "Code review tr∆∞·ªõc khi merge"
      ]
    },
    {
      id: 4,
      title: "üîê Qu√™n push, ƒë·ªìng nghi·ªáp ƒë√£ push tr∆∞·ªõc",
      problem: "Local branch ƒë√£ commit nh∆∞ng remote ƒë√£ c√≥ commit m·ªõi",
      difficulty: "D·ªÖ",
      category: "Push",
      situation: {
        description: "B·∫°n l√†m vi·ªác offline v√† commit local. Khi push th√¨ b√°o l·ªói v√¨ ƒë·ªìng nghi·ªáp ƒë√£ push commit m·ªõi l√™n remote.",
        impact: "Kh√¥ng th·ªÉ push ƒë∆∞·ª£c, c·∫ßn sync v·ªõi remote tr∆∞·ªõc"
      },
      solutions: [
        {
          method: "Pull v√† merge",
          commands: [
            "git pull origin main",
            "# Gi·∫£i quy·∫øt conflict n·∫øu c√≥",
            "git push origin main"
          ],
          explanation: "K√©o thay ƒë·ªïi m·ªõi v·ªÅ v√† merge v·ªõi local"
        },
        {
          method: "Pull v·ªõi rebase",
          commands: [
            "git pull --rebase origin main",
            "# Gi·∫£i quy·∫øt conflict n·∫øu c√≥",
            "git rebase --continue",
            "git push origin main"
          ],
          explanation: "Rebase local commits l√™n tr√™n remote commits"
        },
        {
          method: "Fetch v√† merge th·ªß c√¥ng",
          commands: [
            "git fetch origin",
            "git merge origin/main",
            "git push origin main"
          ],
          explanation: "Ki·ªÉm so√°t qu√° tr√¨nh merge t·ªët h∆°n"
        }
      ],
      prevention: [
        "Push th∆∞·ªùng xuy√™n",
        "Pull tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu l√†m vi·ªác",
        "Communicate v·ªõi team v·ªÅ timeline"
      ]
    },
    {
      id: 5,
      title: "üóëÔ∏è X√≥a nh·∫ßm branch quan tr·ªçng",
      problem: "ƒê√£ x√≥a branch c√≥ code quan tr·ªçng ch∆∞a merge",
      difficulty: "Kh√≥",
      category: "Recovery",
      situation: {
        description: "B·∫°n v√¥ t√¨nh x√≥a branch feature c√≥ nhi·ªÅu code quan tr·ªçng ch∆∞a ƒë∆∞·ª£c merge v√†o main.",
        impact: "M·∫•t code, c√≥ th·ªÉ m·∫•t nhi·ªÅu ng√†y c√¥ng vi·ªác"
      },
      solutions: [
        {
          method: "Kh√¥i ph·ª•c t·ª´ reflog",
          commands: [
            "git reflog",
            "git checkout -b recovered-branch <commit-hash>",
            "git push origin recovered-branch"
          ],
          explanation: "Git reflog l∆∞u l·∫°i l·ªãch s·ª≠ t·∫•t c·∫£ thao t√°c"
        },
        {
          method: "Kh√¥i ph·ª•c t·ª´ remote",
          commands: [
            "git fetch origin",
            "git checkout -b recovered-branch origin/deleted-branch"
          ],
          explanation: "N·∫øu branch ƒë√£ ƒë∆∞·ª£c push l√™n remote"
        },
        {
          method: "T√¨m trong stash",
          commands: [
            "git stash list",
            "git stash show -p stash@{0}",
            "git stash apply stash@{0}"
          ],
          explanation: "Ki·ªÉm tra xem c√≥ code trong stash kh√¥ng"
        }
      ],
      prevention: [
        "Lu√¥n push branch l√™n remote",
        "Double-check tr∆∞·ªõc khi x√≥a branch",
        "S·ª≠ d·ª•ng git branch -d thay v√¨ -D"
      ]
    },
    {
      id: 6,
      title: "üìù S·ª≠a commit message ƒë√£ push",
      problem: "Commit message c√≥ l·ªói ch√≠nh t·∫£ ho·∫∑c kh√¥ng r√µ r√†ng",
      difficulty: "Trung b√¨nh",
      category: "Amend",
      situation: {
        description: "B·∫°n ƒë√£ push commit v·ªõi message c√≥ l·ªói ch√≠nh t·∫£ ho·∫∑c kh√¥ng m√¥ t·∫£ ƒë√∫ng n·ªôi dung thay ƒë·ªïi.",
        impact: "L·ªãch s·ª≠ commit kh√¥ng r√µ r√†ng, kh√≥ theo d√µi"
      },
      solutions: [
        {
          method: "Amend commit cu·ªëi (ch∆∞a push)",
          commands: [
            "git commit --amend -m 'New commit message'"
          ],
          explanation: "Ch·ªâ d√πng khi ch∆∞a push l√™n remote"
        },
        {
          method: "Amend v√† force push",
          commands: [
            "git commit --amend -m 'New commit message'",
            "git push --force-with-lease origin main"
          ],
          explanation: "Nguy hi·ªÉm! Ch·ªâ d√πng khi l√†m vi·ªác m·ªôt m√¨nh"
        },
        {
          method: "T·∫°o commit m·ªõi ƒë·ªÉ clarify",
          commands: [
            "git commit --allow-empty -m 'Clarification: previous commit did X'"
          ],
          explanation: "An to√†n h∆°n, t·∫°o commit r·ªóng ƒë·ªÉ gi·∫£i th√≠ch"
        }
      ],
      prevention: [
        "Vi·∫øt commit message c·∫©n th·∫≠n",
        "S·ª≠ d·ª•ng template cho commit message",
        "Review commit tr∆∞·ªõc khi push"
      ]
    }
  ];

  /**
   * X·ª≠ l√Ω khi click v√†o scenario
   */
  const handleScenarioClick = (index) => {
    setActiveScenario(index);
    setExpandedSolution(null);
  };

  /**
   * Toggle solution expansion
   */
  const toggleSolution = (index) => {
    setExpandedSolution(expandedSolution === index ? null : index);
  };

  /**
   * Copy command to clipboard
   */
  const copyCommand = (command) => {
    navigator.clipboard.writeText(command);
    // C√≥ th·ªÉ th√™m toast notification
  };

  /**
   * Get difficulty color
   */
  const getDifficultyColor = (difficulty) => {
    switch (difficulty) {
      case 'D·ªÖ': return '#2ecc71';
      case 'Trung b√¨nh': return '#f39c12';
      case 'Kh√≥': return '#e74c3c';
      default: return '#95a5a6';
    }
  };

  return (
    <div className="scenarios">
      {/* Header */}
      <div className="scenarios-header">
        <h1>üéØ T√¨nh hu·ªëng th·ª±c t·∫ø v·ªõi Git</h1>
        <p>H·ªçc c√°ch gi·∫£i quy·∫øt c√°c v·∫•n ƒë·ªÅ th∆∞·ªùng g·∫∑p khi s·ª≠ d·ª•ng Git trong d·ª± √°n th·ª±c t·∫ø</p>
      </div>

      <div className="scenarios-container">
        {/* Sidebar - Danh s√°ch scenarios */}
        <div className="scenarios-sidebar">
          <h3>üìã Danh s√°ch t√¨nh hu·ªëng</h3>
          {scenarios.map((scenario, index) => (
            <div
              key={scenario.id}
              className={`scenario-item ${activeScenario === index ? 'active' : ''}`}
              onClick={() => handleScenarioClick(index)}
            >
              <div className="scenario-header">
                <h4 className="scenario-title">{scenario.title}</h4>
                <div className="scenario-meta">
                  <span 
                    className="difficulty-badge"
                    style={{ backgroundColor: getDifficultyColor(scenario.difficulty) }}
                  >
                    {scenario.difficulty}
                  </span>
                  <span className="category-badge">{scenario.category}</span>
                </div>
              </div>
              <p className="scenario-problem">{scenario.problem}</p>
            </div>
          ))}
        </div>

        {/* Main content - Chi ti·∫øt scenario */}
        <div className="scenario-detail">
          {scenarios[activeScenario] && (
            <div className="detail-content">
              {/* Situation */}
              <section className="situation-section">
                <h2>üîç T√¨nh hu·ªëng</h2>
                <div className="situation-card">
                  <h3>{scenarios[activeScenario].title}</h3>
                  <p className="situation-description">
                    {scenarios[activeScenario].situation.description}
                  </p>
                  <div className="impact-box">
                    <strong>‚ö†Ô∏è T√°c ƒë·ªông:</strong> {scenarios[activeScenario].situation.impact}
                  </div>
                </div>
              </section>

              {/* Solutions */}
              <section className="solutions-section">
                <h2>üí° C√°ch gi·∫£i quy·∫øt</h2>
                <div className="solutions-list">
                  {scenarios[activeScenario].solutions.map((solution, index) => (
                    <div key={index} className="solution-card">
                      <div 
                        className="solution-header"
                        onClick={() => toggleSolution(index)}
                      >
                        <h4>{solution.method}</h4>
                        <span className={`expand-icon ${expandedSolution === index ? 'expanded' : ''}`}>
                          ‚ñº
                        </span>
                      </div>
                      
                      {expandedSolution === index && (
                        <div className="solution-content">
                          <p className="solution-explanation">{solution.explanation}</p>
                          <div className="commands-container">
                            <h5>üìù C√°c l·ªánh c·∫ßn ch·∫°y:</h5>
                            {solution.commands.map((command, cmdIndex) => (
                              <div key={cmdIndex} className="command-line">
                                <code>{command}</code>
                                <button 
                                  className="copy-btn"
                                  onClick={() => copyCommand(command)}
                                  title="Copy command"
                                >
                                  üìã
                                </button>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </section>

              {/* Prevention */}
              <section className="prevention-section">
                <h2>üõ°Ô∏è C√°ch ph√≤ng tr√°nh</h2>
                <ul className="prevention-list">
                  {scenarios[activeScenario].prevention.map((tip, index) => (
                    <li key={index} className="prevention-item">
                      <span className="prevention-icon">‚úÖ</span>
                      <span className="prevention-text">{tip}</span>
                    </li>
                  ))}
                </ul>
              </section>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Scenarios;